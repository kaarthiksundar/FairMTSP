/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3.1/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "1.9.20"
    kotlin("plugin.serialization") version "1.9.22"

    // Apply the application plugin to add support for building a CLI application in Java.
    application

    id("jacoco")
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Align versions of all Kotlin components
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib:1.9.10")

    // This dependency is used by the application.
    implementation("com.google.guava:guava:32.0.0-android")

    // --- Development ---
    // Command line argument parsing
    implementation("com.github.ajalt.clikt:clikt-jvm:3.3.0")

    // Graphs
    implementation("org.jgrapht:jgrapht-core:1.5.1")

    // CPLEX
    val cplexJarPath: String by project
//    val cplexJarPath = "/Users/kaarthik/Applications/CPLEX_Studio1210/cplex/lib/cplex.jar"
    implementation(files(cplexJarPath))

    // JSON serialization
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0")

    // --- Logging ---
    implementation("io.github.oshai:kotlin-logging-jvm:6.0.3")
    implementation("org.slf4j:slf4j-simple:2.0.3")

    implementation("org.jetbrains.kotlinx:kotlinx-datetime:0.4.1")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.0")
    implementation(kotlin("stdlib-common"))
    implementation("org.jetbrains.kotlinx:kotlinx-collections-immutable:0.3.4")
    testImplementation(kotlin("test"))

//    // Jackson library to work with JSON/YAML.
//    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.12.0")
//    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.11.0")

}


application {
    // Define the main class for the application.
    mainClass.set("fairMTSP.main.AppKt")
}

tasks {
    register<Delete>("cleanLogs") {
        // Remove all generated files and folders.
        fileTree("logs").visit {
            if (file.name != ".gitkeep")
                project.delete(file)
        }
    }

    jacocoTestReport {
        reports {
            xml.required.set(true)
        }
    }

    val cplexLibPath: String by project
    val args = listOf(
        "-Xms32m",
        "-Xmx22g",
        "-Djava.library.path=$cplexLibPath"
    )

    withType<JavaExec> {
        jvmArgs = args
    }

    test {
        useJUnitPlatform()
    }

}

jacoco {
    toolVersion = "0.8.9"
    reportsDirectory = layout.buildDirectory.dir("jacocoTestReports")
}

tasks {
    register<Jar>("uberJar") {
        archiveFileName.set("uber.jar")
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE

        manifest {
            attributes("Main-Class" to "fairMTSP.main.AppKt")
        }

        val sourcesMain = sourceSets.main.get()
        sourcesMain.allSource.forEach { println("add from sources: ${it.name}") }
        from(sourceSets.main.get().output)

        dependsOn(configurations.runtimeClasspath)
        from(configurations.runtimeClasspath.get()
            .onEach { println("add from dependencies: ${it.name}") }
            .map { if (it.isDirectory) it else zipTree(it) })
    }
}
